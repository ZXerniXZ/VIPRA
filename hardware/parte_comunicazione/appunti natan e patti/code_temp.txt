Per configurare UART1 su pin personalizzati con l'ESP32 utilizzando l'IDE Arduino, puoi usare la classe HardwareSerial. Di seguito trovi un esempio di come impostare UART1 sui pin GPIO16 (RX) e GPIO17 (TX), ma puoi scegliere altri GPIO liberi a seconda delle necessità.

Esempio di codice per configurare UART1 su pin personalizzati:
cpp
Copia codice
#include <HardwareSerial.h>

// Creazione dell'oggetto UART1
HardwareSerial MySerial(1);  // '1' indica UART1

void setup() {
  // Inizializzazione della seriale per il monitor seriale
  Serial.begin(115200);

  // Inizializzazione di UART1 sui pin desiderati (RX = GPIO16, TX = GPIO17)
  MySerial.begin(9600, SERIAL_8N1, 16, 17);  // Imposta UART1 con baud rate 9600, 8 bit di dati, nessuna parità, 1 bit di stop
}

void loop() {
  // Se ricevi dati su UART1, inviali al monitor seriale
  if (MySerial.available()) {
    Serial.write(MySerial.read());
  }

  // Se ricevi dati dal monitor seriale, inviali su UART1
  if (Serial.available()) {
    MySerial.write(Serial.read());
  }
}
Spiegazione del codice:
HardwareSerial MySerial(1);: Creiamo un oggetto HardwareSerial per UART1.
MySerial.begin(9600, SERIAL_8N1, 16, 17);: Inizializziamo UART1 con:
9600 come baud rate.
SERIAL_8N1 per configurare il formato (8 bit di dati, nessuna parità, 1 bit di stop).
16 come RX (puoi cambiare con un altro GPIO libero).
17 come TX (puoi cambiare anche questo con un altro GPIO libero).
In questo modo, hai configurato UART1 per utilizzare i pin GPIO16 e GPIO17 come RX e TX rispettivamente. Ricorda che puoi sostituire i pin 16 e 17 con altri GPIO liberi se necessario.






